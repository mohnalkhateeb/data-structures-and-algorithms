/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import TreeIntersection.BinaryTree;
import TreeIntersection.TreeIntersection;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
//        Library classUnderTest = new Library();
//        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
  @Test
  public void testHash() {

    HashTable hashtable = new HashTable();

    String key = "peter";

    hashtable.hash(key);

    int actual =  hashtable.hash(key);
    int expected =  4;

    System.out.println("test");

    assertEquals( expected, actual,"inserted value into middle of array");
  }


  @Test
  public void testHash2() {

    HashTable HashTable = new HashTable();

    String key = "test";

    HashTable.hash(key);

    int actual =  HashTable.hash(key);
    int expected =  8;

    System.out.println("test");

    assertEquals( expected, actual,"inserted value into middle of array");
  }

  @Test
  public void testHashTableAdd() {

    HashTable test = new HashTable();
    test.add("peter",1000);
    int actual= test.getSize();
    int expected = 1;
    System.out.println("test");

    assertEquals( expected, actual);
    assertEquals(test.get("peter"),1000);
    assertEquals(test.contains("peter"),true);
  }

  @Test
  public void testHashTableGet() {

    HashTable test = new HashTable();
    test.add("peter",1000);
    test.add("miky",2500);
    test.add("billy",1500);

    assertEquals(test.get("peter"),1000);
    assertEquals(test.get("miky"),2500);
    assertEquals(test.get("billy"),1500);
  }

  @Test
  public void testHashTableContains() {

    HashTable test = new HashTable();
    test.add("peter",1000);
    test.add("miky",2500);

    assertEquals(test.contains("peter"),true);
    assertEquals(test.contains("miky"),true);
    assertEquals(test.contains("billy"),false);
  }
  @Test
  public void testHashtableCollision() {

    HashTable test = new HashTable();
    test.add("dop",1000);
    test.add("pod",1000);

    assertEquals( test.hash("dop"), test.hash("pod"));
  }
  @Test
  public void testTreeTransActionNonEmptyTree(){
    BinaryTree<String,Integer> binaryTreeOne = new BinaryTree<>(new HashNode<>("A",100,5));
    HashNode<String,Integer> node1 = new HashNode<>("B",200,3);
    HashNode<String,Integer> node2 = new HashNode<>("C",300,6);
    HashNode<String,Integer> node3 = new HashNode<>("D",160, node1, node2,7);
    HashNode<String,Integer> node5 = new HashNode<>("E",180,7);
    HashNode<String,Integer> node4 = new HashNode<>("F",120, node5, null,5);
    binaryTreeOne.root.rightChild = node4;
    binaryTreeOne.root.leftChild = node3;

    BinaryTree<String,Integer> binaryTreeTwo = new BinaryTree<>(new HashNode<>("G",45,5));
    HashNode<String,Integer> node6 = new HashNode<>("H",200,3);
    HashNode<String,Integer> node7 = new HashNode<>("I",150,3);
    HashNode<String,Integer> node8 = new HashNode<>("J",160, node6, node7,3);
    HashNode<String,Integer> node9 = new HashNode<>("K",120,3);
    HashNode<String,Integer> node10 = new HashNode<>("L",80, node9, null,4);
    binaryTreeTwo.root.rightChild = node10;
    binaryTreeTwo.root.leftChild = node8;


    assertEquals( TreeIntersection.treeIntersection(binaryTreeOne,binaryTreeTwo).toString(), "[160, 200, 120]");
  }
  @Test
  public void testTreeTransActionEmptyTree(){
    BinaryTree<String,Integer> binaryTreeOne = new BinaryTree<>(new HashNode<>("A",100,5));
    HashNode<String,Integer> node1 = new HashNode<>("B",200,3);
    HashNode<String,Integer> node2 = new HashNode<>("C",300,6);
    HashNode<String,Integer> node3 = new HashNode<>("D",160, node1, node2,7);
    HashNode<String,Integer> node5 = new HashNode<>("E",180,7);
    HashNode<String,Integer> node4 = new HashNode<>("F",120, node5, null,5);
    binaryTreeOne.root.rightChild = node4;
    binaryTreeOne.root.leftChild = node3;

    BinaryTree<String,Integer> binaryTreeTwo = new BinaryTree<>(new HashNode<>("G",45,5));


    assertEquals( TreeIntersection.treeIntersection(binaryTreeOne,binaryTreeTwo).toString(), "[]");
  }
//

}
